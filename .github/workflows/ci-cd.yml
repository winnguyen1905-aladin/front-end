# Frontend CI/CD Pipeline
# Builds and serves the React/TypeScript frontend with Vite

name: Frontend CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  # Job 1: Build and Test
  test:
    name: Build and Test
    runs-on: ubuntu-latest  # Temporary: using GitHub-hosted runner for testing

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Verify build environment
      run: |
        echo "Node: $(node --version)"
        echo "NPM: $(npm --version)"
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npx tsc --noEmit
    
    - name: Build application
      run: npm run build
    
    - name: Verify build artifacts
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ dist folder not found!"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "❌ index.html not found in dist!"
          exit 1
        fi
        echo "✅ Build artifacts verified successfully!"
        echo "Build size: $(du -sh dist | cut -f1)"
        ls -la dist/
  
  # Job 2: Deploy to Production (only on main branch push)
  # ⚠️ DISABLED: Requires self-hosted runner with PM2
  # Enable this after setting up self-hosted runner
  deploy:
    name: Deploy to Production  
    runs-on: self-hosted
    needs: test
    if: false  # Disabled temporarily - enable after runner setup
    # if: |
    #   github.event_name == 'push' && 
    #   github.ref == 'refs/heads/main' &&
    #   needs.test.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create .env from GitHub Secrets
      run: |
        # Validate required secrets
        if [ -z "${{ secrets.VITE_API_URL }}" ]; then
          echo "❌ ERROR: VITE_API_URL secret not set!"
          echo "Please add it in GitHub Settings → Secrets"
          exit 1
        fi
        
        # if [ -z "${{ secrets.VITE_SOCKET_URL }}" ]; then
        #   echo "❌ ERROR: VITE_SOCKET_URL secret not set!"
        #   echo "Please add it in GitHub Settings → Secrets"
        #   exit 1
        # fi
        
        # Create .env from secrets only
        cat > .env << EOF
        # API Configuration (from GitHub Secrets)
        VITE_API_URL=${{ secrets.VITE_API_URL }}
        VITE_SOCKET_URL=${{ secrets.VITE_SOCKET_URL }}
        
        # App Information
        VITE_APP_NAME=Aladin Secure Chat
        VITE_APP_VERSION=1.0.0
        
        # Feature Flags (Production)
        VITE_ENABLE_DEBUG=false
        VITE_ENABLE_ANALYTICS=true
        
        # Media Configuration
        VITE_MAX_FILE_SIZE=5242880
        VITE_ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif
        
        # Log Level
        VITE_LOG_LEVEL=error
        EOF
        
        echo "✅ .env file created from GitHub Secrets"
        
    - name: Build application
      run: npm run build
    
    - name: Install PM2 (if not installed)
      run: |
        if ! command -v pm2 &> /dev/null; then
          echo "Installing PM2..."
          npm install -g pm2
        else
          echo "PM2 already installed: $(pm2 --version)"
        fi
    
    - name: Deploy with PM2
      run: |
        # Stop old process (if exists)
        pm2 delete aladin-frontend-prod || true
        
        # Start new process with PM2
        pm2 start ecosystem.config.js --only aladin-frontend-prod --env production
        
        # Save PM2 process list
        pm2 save
        
        # Setup startup script (first time)
        pm2 startup systemd -u $(whoami) --hp $HOME || true
        
        echo "✅ Frontend deployed with PM2"
    
    - name: Show deployment status
      run: |
        echo "=== Deployment Status ==="
        pm2 status
        echo ""
        echo "=== Application Info ==="
        pm2 info aladin-frontend-prod
    
    - name: Health check
      run: |
        echo "Waiting for app to start..."
        sleep 5
        
        # Check if PM2 process is running
        if pm2 list | grep -q "aladin-frontend-prod.*online"; then
          echo "✅ PM2 process is running!"
        else
          echo "❌ PM2 process failed to start!"
          pm2 logs aladin-frontend-prod --lines 50 --nostream
          exit 1
        fi
        
        # Test main page
        if curl -f http://localhost:3000/ > /dev/null; then
          echo "✅ Frontend is accessible!"
        else
          echo "❌ Frontend not accessible!"
          pm2 logs aladin-frontend-prod --lines 50 --nostream
          exit 1
        fi
